/* 
Hello! Welcome to my collection of example SQL queries based on the schema provided in this repo:
https://github.com/IanYork247/demos/blob/main/sql/sql_schema/schema.sql 

This set contains 18 queries designed to demonstrate how I approach extracting and analyzing various types of data. 

I prioritize using base CTEs (Common Table Expressions) for their reusability and modularity. 
They simplify debugging, promote readability, and help maintain a clear and linear flow of logic throughout the queries.
*/

/* Query 1: Find All Active Users
Explanation: This query retrieves all active users. It filters the users table where is_active is true and uses a CTE to modularize the logic. */

with base as (select id, first_name, last_name, email from users where is_active = true)

select * from base;

/* Query 2: Total Sales Per Product
Explanation: Calculates the total quantity sold and revenue generated for each product. It uses a left join to include all product details, even if some products have no sales.*/

with base as 
(select p.name as product_name
, sum(oi.quantity) as total_quantity
, sum(oi.price * oi.quantity) as total_revenue
from order_items oi
left join products p on oi.product_id = p.id
group by all)

select * from base;

/* Query 3: Top 3 Best-Selling Products by Quantity
Explanation: Lists the top 3 products with the highest total quantity sold. Sorting is done in descending order of total quantity. */ 

with base as 
(select p.name as product_name
, sum(oi.quantity) as total_quantity
from order_items oi
left join products p on oi.product_id = p.id
group by all order by total_quantity desc limit 3)

select * from base;

/* Query 4: Customer Lifetime Value with Categorization
Explanation: Calculates the total revenue generated by each customer across all their orders, 
showcasing a key metric for customer analysis. It also categorizes customers based on their lifetime value. */

with base as 
(select u.id as user_id
, u.first_name
, u.last_name
, sum(o.total_amount) as lifetime_value
, sum(case when o.total_amount > 5000 then 1 else 0 end) as vip_orders
, sum(case when o.total_amount between 1000 and 5000 then 1 else 0 end) as regular_orders
, sum(case when o.total_amount <= 1000 then 1 else 0 end) as new_orders
from users u
left join orders o on u.id = o.user_id
group by all)

select * from base;

/* Query 5: Average Order Value
Explanation: Computes the average value of all orders, a common metric for evaluating sales performance. */

with base as (select avg(total_amount) as average_order_value from orders)

select * from base;

/* Query 6: Orders with Missing Items
Explanation: Identifies orders that have no associated items, highlighting potential data inconsistencies or incomplete transactions. */

with base as 
(select o.id as order_id, o.total_amount, oi.id as item_id
from orders o
left join order_items oi on o.id = oi.order_id
where oi.id is null)

select * from base;

/* Query 7: Products Not Yet Sold
Explanation: Lists all products that have not been sold yet by checking for missing entries in the order_items table.*/

with base as 
(select p.id as product_id, p.name as product_name
from products p
left join order_items oi on p.id = oi.product_id
where oi.product_id is null)

select * from base;

/* Query 8: Most Recent Order for Each Customer
Explanation: Identifies the most recent order date for each customer, providing insights into customer recency. */

with base as 
(select user_id, max(order_date) as most_recent_order from orders group by all)

select * from base;

/* Query 9: Daily Revenue Summary
Explanation: Summarizes revenue generated on each day, sorted chronologically, enabling trend analysis.*/

with base as 
(select cast(order_date as date) as order_day
, sum(total_amount) as daily_revenue
from orders
group by all
order by order_day)

select * from base;

/* Query 10: Percentage Contribution of Each Product to Total Revenue 
Explanation: Shows each product revenue and its percentage contribution to the total revenue. */

with base as 
(select p.name as product_name
, sum(oi.price * oi.quantity) as product_revenue
, sum(sum(oi.price * oi.quantity)) over () as total_revenue
, (sum(oi.price * oi.quantity) * 100.0 / sum(sum(oi.price * oi.quantity)) over ()) as percentage_of_total
from order_items oi
left join products p on oi.product_id = p.id
group by all)

select * from base;

/* Query 11: Inactive Customers Who Placed Orders
Explanation: Lists inactive customers who have placed orders, combining user activity and order data. */

with base as 
(select u.id as user_id, u.first_name, u.last_name, count(o.id) as order_count
from users u
left join orders o on u.id = o.user_id
where u.is_active = false
group by all)

select * from base;

/* Query 12: Identify High-Value Customers
Explanation: Identifies customers who have spent more than >$1k across all orders, using the having clause to filter aggregate data.*/

with base as 
(select u.id as user_id, u.first_name, u.last_name
, sum(o.total_amount) as total_spent
from users u
left join orders o on u.id = o.user_id
group by all
having sum(o.total_amount) > 1000)

select * from base;

/* Query 13: Rank Products by Total Revenue
Explanation: Ranks products based on total revenue generated, with the highest revenue ranked first. */

with base as 
(select p.name as product_name
, sum(oi.price * oi.quantity) as total_revenue
, rank() over (order by sum(oi.price * oi.quantity) desc) as revenue_rank
from order_items oi
left join products p on oi.product_id = p.id
group by all)

select * from base;

/* Query 14: Calculate Running Total of Daily Revenue
Explanation: Computes the cumulative revenue over time, helping to track revenue trends. */

with base as 
(select cast(order_date as date) as order_day
, sum(total_amount) as daily_revenue
, sum(sum(total_amount)) over (order by cast(order_date as date)) as running_total
from orders
group by all)

select * from base;

/* Query 15: Percentile of Customer Lifetime Value
Explanation: Determines the percentile rank of each customer lifetime value compared to others. */

with base as 
(select u.id as user_id
, u.first_name
, u.last_name
, sum(o.total_amount) as lifetime_value
, ntile(4) over (order by sum(o.total_amount) desc) as lifetime_value_quartile
from users u
left join orders o on u.id = o.user_id
group by all)

select * from base;

/* Query 16: Top Orders by Customer with Rank
Explanation: Lists the top 3 orders for each customer based on order amount. */

with base as 
(select user_id, id as order_id, total_amount
, rank() over (partition by o.user_id order by total_amount desc) as order_rank
from orders)

select * from base where order_rank <= 3;

/* Query 17: Average Order Value by Customer
Explanation: Calculates the average order value for each customer, using an inner join to include only customers who have placed orders. */

with base as 
(select u.id as user_id
, u.first_name
, u.last_name
, avg(o.total_amount) as avg_order_value
, rank() over (order by avg(o.total_amount) desc) as avg_value_rank
from users u
inner join orders o on u.id = o.user_id
group by all)

select * from base;

/* Query 18: Products with Above-Average Revenue
Explanation: Lists products whose total revenue exceeds the average product revenue. */

with base as 
(select p.name as product_name
, sum(oi.price * oi.quantity) as total_revenue
, avg(sum(oi.price * oi.quantity)) over () as avg_revenue
from order_items oi
left join products p on oi.product_id = p.id
group by all
having sum(oi.price * oi.quantity) > avg(sum(oi.price * oi.quantity)) over ())

select * from base;
